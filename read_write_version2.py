import csv
from datetime import datetime
import math

data_list = []

file_path = "C:\\Users\\chouy\\Desktop\\embedding_system\\Documents0506\\0506final.csv"
output_path = "C:\\Users\\chouy\\Desktop\\embedding_system\\Documents0506\\0506_rssi_output.csv"

# 讀取CSV資料
with open(file_path, "r", encoding="utf-8") as f:
    reader = csv.reader(f)
    next(reader)  # 跳過 header

    for row in reader:
        if not row:
            continue
        row_dict = {}
        for i in range(2, len(row) - 1, 3):
            try:
                rssi_db = int(row[i])
                power_mW = 10 ** (rssi_db / 10)
                time = row[i + 1]
                row_dict[time] = power_mW
            except (ValueError, IndexError):
                continue
        data_list.append(row_dict)

# 時間區間列表
time_ranges = [
    ("10:58:30", "10:58:40"),  ##point 4 d=1
    ("10:58:42", "10:58:52"),  
    ("10:58:55", "10:59:06"),
    ("11:00:27", "11:00:37"),
    ("11:01:26", "11:01:36"),  #d=2
    ("11:01:38", "11:01:48"),
    ("11:01:51", "11:02:01"),
    ("11:02:04", "11:02:14"),
    ("11:03:22", "11:03:32"),  #d=3
    ("11:03:34", "11:03:44"),
    ("11:03:46", "11:03:56"),
    ("11:04:10", "11:04:10"),
    ("11:04:45", "11:04:55"),  #d=4
    ("11:05:07", "11:05:17"),
    ("11:06:00", "11:06:10"),
    ("11:05:32", "11:05:42"),
    ("11:10:00", "11:10:10"),  ##point 2_1 d=1      
    ("11:10:24", "11:10:34"),
    ("11:10:38", "11:10:48"),
    ("11:11:06", "11:11:16"),  
    ("11:11:38", "11:11:48"),  #d=2
    ("11:11:50", "11:12:00"),
    ("11:12:03", "11:12:13"),
    ("11:12:16", "11:12:26"),
    ("11:12:37", "11:12:47"),  #d=3
    ("11:12:50", "11:13:00"),
    ("11:13:16", "11:13:26"),
    ("11:13:29", "11:13:39"),
    ("11:14:00", "11:14:10"),  #d=4
    ("11:14:13", "11:14:23"),
    ("11:14:25", "11:14:35"),
    ("11:14:37", "11:14:47"),
    ("11:16:29", "11:16:39"),  ##point 2_2 d=1 
    ("11:16:45", "11:16:55"),
    ("11:17:17", "11:17:27"),
    ("11:17:30", "11:17:40"),
    ("11:19:32", "11:19:42"),  #d=2
    ("11:19:46", "11:19:56"),
    ("11:20:00", "11:20:10"),
    ("11:22:01", "11:22:11"),
    ("11:22:34", "11:22:44"),  #d=3
    ("11:22:46", "11:22:56"),
    ("11:23:00", "11:23:10"),
    ("11:23:15", "11:23:25"),  
    ("11:24:00", "11:24:10"),  #d=4
    ("11:24:15", "11:24:25"),
    ("11:24:41", "11:24:51"),
    ("11:25:05", "11:25:15"),
    ("11:27:17", "11:27:27"),  ##point 1 d=1 
    ("11:27:32", "11:27:42"),
    ("11:28:00", "11:28:10"),
    ("11:28:13", "11:28:23"),
    ("11:28:44", "11:28:54"),  #d=2
    ("11:29:00", "11:29:10"),
    ("11:29:14", "11:29:24"),
    ("11:29:26", "11:29:36"),
    ("11:29:53", "11:30:03"),  #d=3
    ("11:30:07", "11:30:17"),
    ("11:30:20", "11:30:30"),
    ("11:30:32", "11:30:42"),  
    ("11:30:56", "11:31:06"),  #d=4
    ("11:31:08", "11:31:18"),
    ("11:31:21", "11:31:31"),
    ("11:31:33", "11:31:43"),
    ("11:34:28", "11:34:38"),  ##point 3_1 d=1 
    ("11:34:45", "11:34:55"),
    ("11:35:00", "11:35:10"),
    ("11:35:12", "11:35:22"),
    ("11:35:36", "11:35:46"),  #d=2
    ("11:35:48", "11:35:58"),
    ("11:36:00", "11:36:10"),
    ("11:36:15", "11:36:25"),
    ("11:36:36", "11:36:46"),  #d=3
    ("11:36:48", "11:36:58"),
    ("11:37:00", "11:37:10"),
    ("11:37:28", "11:37:38"),  
    ("11:37:57", "11:38:07"),  #d=4
    ("11:38:12", "11:38:22"),
    ("11:38:29", "11:38:39"),
    ("11:38:41", "11:38:51"),
    ("11:40:34", "11:40:44"),  ##point 3_2 d=1 
    ("11:40:48", "11:40:58"),
    ("11:41:02", "11:41:12"),
    ("11:41:16", "11:41:26"),
    ("11:41:39", "11:41:49"),  #d=2
    ("11:42:07", "11:42:17"),
    ("11:42:23", "11:42:33"),
    ("11:42:35", "11:42:45"),
    ("11:43:00", "11:43:10"),  #d=3
    ("11:43:12", "11:43:22"),
    ("11:43:24", "11:43:34"),
    ("11:43:39", "11:43:49"),  
    ("11:44:13", "11:44:23"),  #d=4
    ("11:44:25", "11:44:35"),
    ("11:44:37", "11:44:47"),
    ("11:44:50", "11:45:00"),
    ("11:51:40", "11:51:50"),  ##test c 
    ("11:51:54", "11:52:04"),
    ("11:52:14", "11:52:24"),
    ("11:52:26", "11:52:36"),
    ("11:54:22", "11:54:32"),  #test b
    ("11:54:35", "11:54:45"),
    ("11:54:50", "11:55:00"),
    ("11:55:03", "11:55:13"),
    ("11:56:50", "11:57:00"),  #test a
    ("11:57:04", "11:57:14"),
    ("11:57:18", "11:57:28"),
    ("11:57:33", "11:57:43")

]

# 轉為 datetime 形式
time_ranges_dt = [(datetime.strptime(start, "%H:%M:%S"), datetime.strptime(end, "%H:%M:%S")) for start, end in time_ranges]

# 每四筆時間合併成一組
grouped_ranges = [time_ranges_dt[i:i + 4] for i in range(0, len(time_ranges_dt), 4)]

# Step 3: 寫入結果
output_rows = [["minor", "average rssi(mW)", "dBm"]]

for group in grouped_ranges:
    if not group:
        continue

    group_start = group[0][0]
    group_end = group[-1][1]
    output_rows.append(["time range", group_start.strftime("%H:%M:%S"), group_end.strftime("%H:%M:%S")])

    for row_idx, row_dict in enumerate(data_list):
        total_rssi = 0
        count = 0

        for start_time, end_time in group:
            for time_str, rssi in row_dict.items():
                try:
                    time_obj = datetime.strptime(time_str, "%H:%M:%S")
                    if start_time <= time_obj < end_time:
                        total_rssi += rssi
                        count += 1
                except ValueError:
                    continue

        if count > 0:
            avg_rssi = total_rssi / count
            avg_rssi_db = 10 * math.log10(avg_rssi)
            output_rows.append([f"row{row_idx + 1}", f"{avg_rssi:.6e}", f"{avg_rssi_db:.2f}"])
        else:
            output_rows.append([f"row{row_idx + 1}", "No information", "No information"])

# Step 4: 寫入CSV檔
with open(output_path, "w", newline='', encoding="utf-8") as f:
    writer = csv.writer(f)
    writer.writerows(output_rows)

print("✅ 已成功輸出到：", output_path)